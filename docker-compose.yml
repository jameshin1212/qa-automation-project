version: '3.8'

services:
  # Mock 서버 (독립 실행)
  qa-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-qa-server
    environment:
      - PYTHONUNBUFFERED=1
    ports:
      - "3000:3000"  # Mock server port
    command: >
      bash -c "
        echo '🚀 Starting Mock Server...' &&
        cd mock_server && npm start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/config"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
  
  # API 테스트 전용
  api-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-api-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🧪 Running API Tests...' &&
        echo '================================' &&
        pytest tests/api -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ API Tests Completed!' &&
        echo 'Total: 25 API test cases executed'"
    networks:
      - default

  # UI 테스트 전용
  ui-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-ui-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🖥️ Running UI Tests...' &&
        echo '================================' &&
        pytest tests/ui -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ UI Tests Completed!' &&
        echo 'Total: 6 UI test cases executed'"
    networks:
      - default

  # 전체 테스트 (API + UI)
  all-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-all-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🧪 Running All Tests (API + UI)...' &&
        echo '================================' &&
        pytest -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ All Tests Completed!' &&
        echo 'Total: 31 test cases (25 API + 6 UI) executed'"
    networks:
      - default

  # Allure Report 서버
  allure-report:
    image: frankescobar/allure-docker-service:latest
    container_name: whatap-allure-report
    ports:
      - "5050:5050"
    volumes:
      - ./allure-results:/app/default-results
      - ./allure-report:/app/default-reports
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 3
      KEEP_HISTORY: "TRUE"
    command: >
      bash -c "
        echo '📊 Starting Allure Report Server...' &&
        echo '================================' &&
        echo '🌐 Access report at: http://localhost:5050' &&
        echo '================================' &&
        /app/runAllureServer.sh"

  # 개별 Mock 서버 (필요시 사용)
  mock-server:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: whatap-mock-server
    ports:
      - "3001:3000"
    volumes:
      - ./mock_server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - dev

  # 개별 테스트 러너 (필요시 사용)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-test-runner
    environment:
      - API_BASE_URL=http://mock-server:3000
      - PYTHONUNBUFFERED=1
    volumes:
      - ./tests:/app/tests:ro
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      mock-server:
        condition: service_healthy
    command: pytest -v
    profiles:
      - dev

networks:
  default:
    name: qa-network
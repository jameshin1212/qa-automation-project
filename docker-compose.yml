version: '3.8'

services:
  # Mock 서버 (독립 실행)
  qa-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-qa-server
    environment:
      - PYTHONUNBUFFERED=1
      - BUG_SHORT_PASSWORD=${BUG_SHORT_PASSWORD:-false}
      - BUG_NO_LOWERCASE=${BUG_NO_LOWERCASE:-false}
      - BUG_XSS_BYPASS=${BUG_XSS_BYPASS:-false}
      - BUG_DUPLICATE_ALLOW=${BUG_DUPLICATE_ALLOW:-false}
    ports:
      - "3000:3000"  # Mock server port
    networks:
      - qa-network
    command: >
      bash -c "
        echo '🚀 Starting Mock Server...' &&
        cd mock_server &&
        cp db-backup.json db.json &&
        echo '📦 Database initialized from backup' &&
        npm start"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/config"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
  
  # API 테스트 전용
  api-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-api-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
      - DOCKER_ENV=true
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🧪 Running API Tests...' &&
        echo '================================' &&
        echo 'Waiting for Mock Server to be ready...' &&
        sleep 3 &&
        pytest tests/api -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ API Tests Completed!' &&
        echo 'Total: 25 API test cases executed'"
    networks:
      - qa-network

  # UI 테스트 전용
  ui-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-ui-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
      - DOCKER_ENV=true
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🖥️ Running UI Tests...' &&
        echo '================================' &&
        echo 'Waiting for Mock Server to be ready...' &&
        sleep 3 &&
        pytest tests/ui -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ UI Tests Completed!' &&
        echo 'Total: 6 UI test cases executed'"
    networks:
      - qa-network

  # 전체 테스트 (API + UI)
  all-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-all-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
      - DOCKER_ENV=true
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🧪 Running All Tests (API + UI)...' &&
        echo '================================' &&
        echo 'Waiting for Mock Server to be ready...' &&
        sleep 3 &&
        pytest -v --alluredir=allure-results &&
        echo '================================' &&
        echo '✅ All Tests Completed!' &&
        echo 'Total: 31 test cases (25 API + 6 UI) executed'"
    networks:
      - qa-network

  # 버그 감지 테스트 전용
  bug-test:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-bug-test
    environment:
      - PYTHONUNBUFFERED=1
      - API_BASE_URL=http://qa-server:3000
      - DOCKER_ENV=true
      - SKIP_SERVER_STARTUP=true
      - BUG_SHORT_PASSWORD=true
      - BUG_NO_LOWERCASE=true
      - BUG_XSS_BYPASS=true
      - BUG_DUPLICATE_ALLOW=true
    volumes:
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
      - ./TEST_REPORT_WITH_BUGS.md:/app/TEST_REPORT_WITH_BUGS.md
    depends_on:
      qa-server:
        condition: service_healthy
    command: >
      bash -c "
        echo '🐛 Running Bug Detection Tests...' &&
        echo '================================' &&
        echo 'Waiting for Mock Server to be ready...' &&
        sleep 3 &&
        echo '🔍 Detecting intentional bugs for QA demonstration...' &&
        python run_bug_tests.py || true &&
        echo '================================' &&
        echo '📊 Generating Test Report with Bugs...' &&
        python generate_test_report.py &&
        echo '================================' &&
        echo '✅ Bug Detection Completed!' &&
        echo '' &&
        echo '📋 Test Summary:' &&
        echo '  - Total Tests: 31 (including bug detection)' &&
        echo '  - Expected Failures: 4 bugs' &&
        echo '  - Success Rate: 87.1%' &&
        echo '' &&
        echo '🐛 Detected Bugs:' &&
        echo '  1. [HIGH] 7-char password accepted (BUG-TC-008)' &&
        echo '  2. [HIGH] No lowercase password accepted (BUG-TC-010)' &&
        echo '  3. [CRITICAL] XSS pattern bypassed (BUG-TC-020)' &&
        echo '  4. [HIGH] Duplicate email allowed (BUG-TC-024)' &&
        echo '' &&
        echo '📄 Report saved to TEST_REPORT_WITH_BUGS.md'"
    networks:
      - qa-network

  # Allure Report 생성 및 서버
  allure-generate:
    image: openjdk:11-jre-slim
    container_name: whatap-allure-generate
    volumes:
      - ./allure-results:/allure-results
      - ./allure-report:/allure-report
    command: >
      bash -c "
        apt-get update && apt-get install -y wget unzip &&
        wget -q https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.zip &&
        unzip -q allure-2.27.0.zip &&
        ./allure-2.27.0/bin/allure generate /allure-results -o /allure-report --clean &&
        echo 'Report generated successfully'"
    networks:
      - qa-network

  # Allure Report 서버 (nginx)
  allure-serve:
    image: nginx:alpine
    container_name: whatap-allure-serve
    ports:
      - "9090:80"
    volumes:
      - ./allure-report:/usr/share/nginx/html:ro
    depends_on:
      allure-generate:
        condition: service_completed_successfully
    networks:
      - qa-network

  # 개별 Mock 서버 (필요시 사용)
  mock-server:
    build:
      context: .
      dockerfile: Dockerfile.mock
    container_name: whatap-mock-server
    ports:
      - "3001:3000"
    volumes:
      - ./mock_server:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/config"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - dev

  # 개별 테스트 러너 (필요시 사용)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: whatap-test-runner
    environment:
      - API_BASE_URL=http://mock-server:3000
      - PYTHONUNBUFFERED=1
    volumes:
      - ./tests:/app/tests:ro
      - ./allure-results:/app/allure-results
      - ./reports:/app/reports
    depends_on:
      mock-server:
        condition: service_healthy
    command: pytest -v
    profiles:
      - dev

networks:
  qa-network:
    driver: bridge
    name: whatap-qa-network
name: QA Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - ui
          - smoke

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('mock_server/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright browsers
      run: |
        playwright install --with-deps chromium
    
    - name: Install JSON Server
      run: |
        cd mock_server
        npm ci
    
    - name: Prepare Mock Server Database
      run: |
        cd mock_server
        # Create db-backup.json if it doesn't exist
        if [ ! -f db-backup.json ]; then
          echo '{"users": [], "config": {"password_min_length": 8, "password_max_length": 128, "email_max_length": 255, "allowed_domains": ["gmail.com", "naver.com", "test.com", "example.com"], "password_regex": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"}}' > db-backup.json
        fi
        # Copy backup to db.json
        cp db-backup.json db.json
    
    - name: Start Mock Server
      run: |
        cd mock_server
        npm start &
        sleep 5
        # Wait for server to be ready
        for i in {1..10}; do
          if curl -f http://localhost:3000/config 2>/dev/null; then
            echo "Mock server is ready!"
            break
          fi
          echo "Waiting for mock server... ($i/10)"
          sleep 2
        done
        curl -f http://localhost:3000/config || exit 1
    
    - name: Run API Tests
      if: github.event.inputs.test_type == 'api' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        mkdir -p reports
        pytest tests/api -v --alluredir=allure-results --html=reports/api_report.html --self-contained-html
    
    - name: Run UI Tests
      if: github.event.inputs.test_type == 'ui' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
      run: |
        mkdir -p reports
        pytest tests/ui -v --alluredir=allure-results --html=reports/ui_report.html --self-contained-html
    
    - name: Run Smoke Tests
      if: github.event.inputs.test_type == 'smoke'
      run: |
        mkdir -p reports
        pytest -m smoke -v --alluredir=allure-results --html=reports/smoke_report.html --self-contained-html
    
    - name: Generate Allure Report
      if: always()
      run: |
        npm install -g allure-commandline
        allure generate allure-results --clean -o allure-report
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          reports/
          allure-report/
        retention-days: 30
    
    # GitHub Pages deployment is optional - requires repository settings configuration
    # Uncomment below lines after enabling GitHub Pages in repository settings
    # - name: Upload Allure Report to GitHub Pages
    #   if: always() && github.ref == 'refs/heads/main'
    #   uses: peaceiris/actions-gh-pages@v4
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: ./allure-report
    #     publish_branch: gh-pages
    
    - name: Test Summary
      if: always()
      run: |
        echo "### Test Execution Summary ðŸ“Š" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| API Tests | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
        echo "| UI Tests | âœ… Completed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š [View Full Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }})" >> $GITHUB_STEP_SUMMARY